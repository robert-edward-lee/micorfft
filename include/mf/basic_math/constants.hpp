#ifndef HPP_MF_BASIC_MATH_CONSTANTS
#define HPP_MF_BASIC_MATH_CONSTANTS

#include "mf/config.hpp"
#include "mf/types/floating.hpp"

#if MF_HAS_FLOAT128_TYPE && defined(__GNUC__)
// from boost:
// This is the only way we can avoid
// warning: non-standard suffix on floating constant [-Wpedantic]
// when building with -Wall -pedantic.  Neither __extension__
// nor #pragma dianostic ignored work :(
#pragma GCC system_header
#endif

#if defined(__cpp_constexpr)
#define MF_MATH_SPECIALIZE_CONST(n, v, t, s) \
    template<> struct n<t> { \
        static constexpr t value = MF_DO_CONCAT(v, s); \
    };
#else
#define MF_MATH_SPECIALIZE_CONST(n, v, t, s) \
    template<> struct n<t> { \
        static const t value; \
    }; \
    const t n<t>::value = MF_DO_CONCAT(v, s);
#endif

#if MF_HAS_FLOAT128_TYPE
#if defined(__cpp_constexpr)
#define MF_MATH_SPECIALIZE_FLOAT128_CONST(n, v) \
    template<> struct n<float128_t> { \
        static constexpr float128_t value = MF_FLOAT128_C(v); \
    };
#else
#define MF_MATH_SPECIALIZE_FLOAT128_CONST(n, v) \
    template<> struct n<float128_t> { \
        static const float128_t value; \
    }; \
    const float128_t n<float128_t>::value = MF_FLOAT128_C(v);
#endif
#else
#define MF_MATH_SPECIALIZE_FLOAT128_CONST(n, v)
#endif

#if defined(__cpp_variable_templates)
#define MF_MATH_DECLARE_VARIABLE_TEMPLATES(T, n) template<typename T> constexpr T MF_DO_CONCAT(n, _v) = n<T>::value;
#else
#define MF_MATH_DECLARE_VARIABLE_TEMPLATES(T, n)
#endif

#define MF_MATH_DECLARE_CONST(n, v) \
    template<typename T> struct n {}; \
    MF_MATH_DECLARE_VARIABLE_TEMPLATES(T, n) \
    MF_MATH_SPECIALIZE_CONST(n, v, float, f) \
    MF_MATH_SPECIALIZE_CONST(n, v, double, l) \
    MF_MATH_SPECIALIZE_CONST(n, v, long double, l) \
    MF_MATH_SPECIALIZE_FLOAT128_CONST(n, v)

namespace mf {
// clang-format off
MF_MATH_DECLARE_CONST(e,         2.71828182845904523536028747135266249775724709369995957496696762772407663035354759457138217852516642742746639193e+00)
MF_MATH_DECLARE_CONST(log2e,     1.44269504088896340735992468100189213742664595415298593413544940693110921918118507988552662289350634449699751831e+00)
MF_MATH_DECLARE_CONST(lge,       4.34294481903251827651128918916605082294397005803666566114453783165864649208870774729224949338431748318706106745e-01)
MF_MATH_DECLARE_CONST(ln2,       6.93147180559945309417232121458176568075500134360255254120680009493393621969694715605863326996418687542001481021e-01)
MF_MATH_DECLARE_CONST(ln10,      2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196778404e+00)

MF_MATH_DECLARE_CONST(pi,        3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651e+00)
MF_MATH_DECLARE_CONST(two_pi,    6.28318530717958647692528676655900576839433879875021164194988918461563281257241799725606965068423413596429617303e+00)
MF_MATH_DECLARE_CONST(inv_pi,    3.18309886183790671537767526745028724068919291480912897495334688117793595268453070180227605532506171912145685453e-01)
MF_MATH_DECLARE_CONST(sqrt1_pi,  5.64189583547756286948079451560772585844050629328998856844085721710642468441493414486743660202107363443028347906e-01)

MF_MATH_DECLARE_CONST(sqrt2,     1.41421356237309504880168872420969807856967187537694807317667973799073247846210703885038753432764157273501384623e+00)
MF_MATH_DECLARE_CONST(sqrt1_2,   7.07106781186547524400844362104849039284835937688474036588339868995366239231053519425193767163820786367506923115e-01)
MF_MATH_DECLARE_CONST(sqrt3,     1.73205080756887729352744634150587236694280525381038062805580697945193301690880003708114618675724857567562614142e+00)
MF_MATH_DECLARE_CONST(sqrt1_3,   5.77350269189625764509148780501957455647601751270126876018602326483977672302933345693715395585749525225208713805e-01)

MF_MATH_DECLARE_CONST(egamma,    5.77215664901532860606512090082402431042159335939923598805767234884867726777664670936947063291746749514631447250e-01)
MF_MATH_DECLARE_CONST(phi,       1.61803398874989484820458683436563811772030917980576286213544862270526046281890244970720720418939113748475408808e+00)
} // namespace mf

#undef MF_MATH_DECLARE_CONST
#undef MF_MATH_DECLARE_VARIABLE_TEMPLATES
#undef MF_MATH_SPECIALIZE_FLOAT128_CONST
#undef MF_MATH_SPECIALIZE_CONST

#endif // HPP_MF_BASIC_MATH_CONSTANTS
